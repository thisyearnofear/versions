// VERSIONS - Minimal REST API Server (No Audio Dependencies)\n// This is a simplified server that provides only the REST API for the web frontend\n// without any audio playback functionality.\n\nmod rest_api;\nmod filecoin_service;\n\nuse std::net::SocketAddr;\nuse anyhow::Result;\nuse tokio_util::sync::CancellationToken;\nuse tokio::task::JoinHandle;\n\n#[macro_use]\nextern crate log;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Setup basic logging\n    env_logger::init();\n    \n    info!(\"VERSIONS Minimal Server starting...\");\n    \n    let cancel_token = CancellationToken::new();\n    \n    // Setup Ctrl+C handler\n    let cancel_token_ctrlc = cancel_token.clone();\n    ctrlc::set_handler(move || {\n        info!(\"Received Ctrl+C, shutting down...\");\n        cancel_token_ctrlc.cancel();\n    })\n    .expect(\"Error setting Ctrl-C handler\");\n    \n    // Start REST API server\n    let rest_handle = start_rest_api(cancel_token.clone()).await?;\n    \n    info!(\"VERSIONS Minimal Server ready!\");\n    \n    // Wait for shutdown\n    cancel_token.cancelled().await;\n    \n    // Cleanup\n    let _ = rest_handle.await;\n    \n    info!(\"VERSIONS Minimal Server stopped\");\n    Ok(())\n}\n\n/// Start the REST API server for web frontend\nasync fn start_rest_api(\n    cancel_token: CancellationToken,\n) -> Result<JoinHandle<Result<(), std::io::Error>>> {\n    let app = rest_api::create_router();\n    let addr = SocketAddr::from(([127, 0, 0, 1], 8080));\n    \n    info!(\"REST API attempting to bind to {addr}\");\n    \n    // Test binding first\n    let listener = tokio::net::TcpListener::bind(addr).await\n        .map_err(|e| anyhow::anyhow!(\"Failed to bind REST API to {addr}: {e}\"))?;\n    \n    let actual_addr = listener.local_addr()\n        .map_err(|e| anyhow::anyhow!(\"Failed to get local address for REST API: {e}\"))?;\n    \n    info!(\"REST API successfully bound to {actual_addr}\");\n    \n    let handle = tokio::spawn(async move {\n        info!(\"Starting REST API server...\");\n        match axum::serve(listener, app)\n            .with_graceful_shutdown(cancel_token.cancelled_owned())\n            .await\n        {\n            Ok(()) => {\n                info!(\"REST API server stopped gracefully\");\n                Ok(())\n            }\n            Err(e) => {\n                error!(\"REST API server error: {e:?}\");\n                Err(e)\n            }\n        }\n    });\n    \n    Ok(handle)\n}\n"